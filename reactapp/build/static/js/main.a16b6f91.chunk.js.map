{"version":3,"sources":["components/UrlValidator/UrlValidator.js","App.js","reportWebVitals.js","index.js"],"names":["UrlValidator","_useState","useState","_useState2","_slicedToArray","domain","setDomain","_useState3","_useState4","path","setPath","_useState5","_useState6","method","setMethod","_useState7","_useState8","body","setBody","_useState9","_useState10","message","setMessage","useEffect","url","test","cleanedPath","trim","replace","includes","length","tem","concat","console","log","_jsxs","children","onSubmit","event","preventDefault","target","value","_jsx","htmlFor","type","id","onChange","React","Fragment","App","className","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a16b6f91.chunk.js","sourcesContent":["//UrlValidator.js\nimport React, { useState,useEffect } from 'react';\n\nfunction UrlValidator() {\n  const [domain, setDomain] = useState('');\n  const [path, setPath] = useState('');\n  const [method, setMethod] = useState('GET');\n  const [body, setBody] = useState('');\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    if (domain && path && method) {\n      let url = \"\";\n\n    // Validate domain and path ^w+\\.[A-Za-z0-9]+\\.com$\n    if (!/^w+\\.[A-Za-z0-9]+\\.com$/i.test(domain)) {\n      setMessage('Invalid URL! Please recheck your URL');\n      return;\n    }\n    \n    const cleanedPath = path.trim().replace(' ', '/');\n   \n    // Validate body for POST and PUT methods\n    if (['POST', 'PUT'].includes(method)) {\n      if((body.trim().length === 0) || (body.trim().length > 0 && (!/^\\{.\"[A-Za-z]+\".:.\"[A-Za-z]+\".\\}$/i.test(body)))) {\n      setMessage('Error in the Body');\n      return;\n      }\n    }\n    \n    if(['GET'].includes(method) && body.trim().length > 0) {\n      if(!/^\\{.\"[A-Za-z]+\".:.\"[A-Za-z]+\".\\}$/i.test(body)) {\n      setMessage('Error in the Body of the Query Params');\n      return;\n      }\n    }\n\n    // Construct URL\n    \n    if(['GET'].includes(method) && body.trim().length > 0) {\n      let te = body.trim().replace(/[\\s\"]+/g,\"\");\n      const tem = te.trim().replace(\":\",\"=\");\n      url = `${domain}/${cleanedPath}?${tem}`;\n    }\n    else {\n      url = `${domain}/${cleanedPath}`;\n    }\n\n    // Log URL and body for debugging\n    console.log(`URL: ${url}`);\n    console.log(`Body: ${body}`);\n\n    // Clear form and show success message\n    setDomain('');\n    setPath('');\n    setMethod('GET');\n    setBody('');\n    setMessage(url);\n    }\n  }, [domain, path, method]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const target = event.target;\n    setDomain(target[0].value);\n    setPath(target[1].value);\n    setMethod(target[2].value);\n    setBody(target[3].value);\n    \n  }\n\n  return (\n    <div data-testid=\"url-validator\">\n      <form data-testid=\"submit\" onSubmit={handleSubmit}>\n        <label htmlFor=\"domain\">Domain:</label>\n        <input data-testid=\"domain\" type=\"text\" id=\"domain\" value={domain} onChange={(event) => setDomain(event.target.value)} />\n\n        <label htmlFor=\"path\">Path:</label>\n        <input data-testid=\"path\" type=\"text\" id=\"path\" value={path} onChange={(event) => setPath(event.target.value)} />\n\n        <label htmlFor=\"method\">Method:</label>\n        <select data-testid=\"method\" id=\"method\" value={method} onChange={(event) => setMethod(event.target.value)} >\n          <option value=\"GET\">GET</option>\n          <option value=\"POST\">POST</option>\n          <option value=\"PUT\">PUT</option>\n          <option value=\"DELETE\">DELETE</option>\n        </select>\n\n        {method !== \"DELETE\" &&\n          <React.Fragment>\n            <label htmlFor=\"body\">Body:</label>\n            <textarea data-testid=\"body\" id=\"body\" value={body} onChange={(event) => setBody(event.target.value)} ></textarea>\n          </React.Fragment>\n        }\n\n        <button type=\"submit\">Validate URL</button>\n      </form>\n\n      {message && <div data-testid=\"message\">{message}</div>}\n      \n    </div>\n  );\n}\n\nexport default UrlValidator;","import './App.css';\nimport UrlValidator from './components/UrlValidator/UrlValidator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UrlValidator />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}